REFRESHED MAP ON WEBPAGE:

As you will see, inside the app.py, I added the following:

    " cur.execute("""UPDATE grid_data
                   SET fuzzyvalue = (bathmean * {}) + (shipmean * {}) + (windmean * {})
                   WHERE (pareasmean = 0 AND bufformean = 0);""".format(wB, wS, wW)) "
#in the last line we add the filters that we take in count areas where protected areas and buffer are equal to 0.0 (not restricted)
.
.
.
.
.

" #create an empty geojson file and overwrite it with the output
    f = open(r"..here put the path to the geojson file as : C:\Users\......\static\output.geojson", "w+")
    f.write(output)
    f.close()

    return jsonify(output)

#enable refreshing map by reloading

TEMPLATES_AUTO_RELOAD = True
app.config['TEMPLATES_AUTO_RELOAD'] = True "

A file called "output.geojson" should be inside the static folder

In "step No.0", the fuzzy value starts as "1.0" in all pixels of the grid. (that means no suitability, aka no data).
After when putting weighs, the map gets the colors in areas where "WHERE (pareasmean = 0 AND bufformean = 0)"

Also, in javascript.js, at the var=clasification, I added in the last else{} the following:
"   else { layercolor='rgb(255, 255, 255)';
  }"
here it takes white color when fuzzyvalue = 1.0 (the starting point)
.
.
.
.
.
Finally, we put inside the url, the path for the geojson as above

var grid = new ol.layer.Vector({
  title: 'Grid',
  source: new ol.source.Vector({
    format: new ol.format.GeoJSON(),
    url: 'static/output.geojson', //name the url after the created geojson from the app.py
  }),
  style: classification
});

HOW IT WORKS!! : PUT WEIGHS AND THEN "CLICK ME", wait for the POSTing to finish in command prompt, and then refresh page

Hope it works for everyone!!


